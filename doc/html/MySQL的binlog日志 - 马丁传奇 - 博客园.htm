<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="zh-cn">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>MySQL的binlog日志 - 马丁传奇 - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=VDh8zSH1vx51MDqRT7hK220akQ58FjlaaeGuWBPhfOA1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/marvin2/bundle-marvin2-brown.css?v=XX5jb76xyBTDkuz4GHc9T_qGUR-1oOf-1_iv8KwHFqI1"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/martinzhang/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/martinzhang/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/martinzhang/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'martinzhang', cb_enable_mathjax=false;</script>
<script src="/bundles/blog-common.js?v=FPlxjK7DBkhdjUge-xvpcctYZfiyO32cepQZO-j3WJk1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<div id="top">

<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/martinzhang/">马丁传奇</a></h1>
<p id="tagline"></p>
</div>
<div id="leftmenu">

	
<h3>导航</h3>
<ul>
	<li>
		<a id="MyLinks1_HomeLink" href="http://www.cnblogs.com/">博客园</a>
	<li><a id="MyLinks1_MyHomeLink" href="http://www.cnblogs.com/martinzhang/">首页</a></li>
	<li><a id="MyLinks1_NewPostLink" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
	<li>
		<a id="MyLinks1_ContactLink" accesskey="9" rel="nofollow" href="http://msg.cnblogs.com/send/%E9%A9%AC%E4%B8%81%E4%BC%A0%E5%A5%87">联系</a>
	<li>
		<a id="MyLinks1_Syndication" href="http://www.cnblogs.com/martinzhang/rss">订阅</a><a id="MyLinks1_XMLLink" href="http://www.cnblogs.com/martinzhang/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>
	<li>
		<a id="MyLinks1_Admin" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>

	<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
	
<h3>统计</h3>
<ul>
	<li>
		随笔 -
		60
	<li>
		文章 -
		0
	<li>
		评论 -
		1
	<li>
		引用 -
		0
	</li>
</ul>

	
<h3>公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>

	<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>

</div>
<div id="main">
	
<div id="post_detail">
	<div class="post">
		<h2>
			<a id="cb_post_title_url" href="http://www.cnblogs.com/martinzhang/p/3454358.html">MySQL的binlog日志</a>
		</h2>
		<div id="cnblogs_post_body"><div class="cnblogs_code">
<pre><span style="color: #000000;">    binlog 基本认识
    MySQL的二进制日志可以说是MySQL最重要的日志了，它记录了所有的DDL和DML(除了数据查询语句)语句，以事件形式记录，还包含语句所执行的消耗的时间，MySQL的二进制日志是事务安全型的。

    一般来说开启二进制日志大概会有1</span>%的性能损耗(参见MySQL官方中文手册 5.1.24版)。二进制有两个最重要的使用场景:<span style="color: #000000;"> 
    其一：</span><span style="color: #008080;">MySQL</span> Replication在Master端开启binlog，Mster把它的二进制日志传递给slaves来达到master-<span style="color: #000000;">slave数据一致的目的。 
    其二：自然就是数据恢复了，通过使用mysqlbinlog工具来使恢复数据。
    
    二进制日志包括两类文件：二进制日志索引文件（文件名后缀为</span>.index）用于记录所有的二进制文件，二进制日志文件（文件名后缀为.00000*<span style="color: #000000;">）记录数据库所有的DDL和DML(除了数据查询语句)语句事件。 


一、开启binlog日志：
    vi编辑打开mysql配置文件
    </span><span style="color: #008000;">#</span><span style="color: #008000;"> vi /usr/local/mysql/etc/my.cnf</span>
<span style="color: #000000;">    在[mysqld] 区块
    设置</span>/添加 <span style="color: #008080;">log</span>-bin=<span style="color: #008080;">mysql</span>-bin  确认是打开状态(值 <span style="color: #008080;">mysql</span>-<span style="color: #000000;">bin 是日志的基本名或前缀名)；

    重启mysqld服务使配置生效
    </span><span style="color: #008000;">#</span><span style="color: #008000;"> pkill mysqld</span>
    <span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqld_safe --user=mysql &amp;</span>
<span style="color: #000000;">

二、也可登录mysql服务器，通过mysql的变量配置表，查看二进制日志是否已开启 单词：variable[ˈvɛriəbəl] 变量

    登录服务器
    </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysql -uroot -p123456</span>

    <span style="color: #008080;">mysql</span>&gt; show variables like 'log_%'<span style="color: #000000;">; 
    </span>+----------------------------------------+---------------------------------------+
    | Variable_name                          | Value                                 |
    +----------------------------------------+---------------------------------------+
    | log_bin                                | ON                                    | ------&gt;<span style="color: #000000;"> ON表示已经开启binlog日志
    </span>| log_bin_basename                       | /usr/local/<span style="color: #008080;">mysql</span>/data/<span style="color: #008080;">mysql</span>-bin       |
    | log_bin_index                          | /usr/local/<span style="color: #008080;">mysql</span>/data/<span style="color: #008080;">mysql</span>-bin.index |
    | log_bin_trust_function_creators        | OFF                                   |
    | log_bin_use_v1_row_events              | OFF                                   |
    | log_error                              | /usr/local/<span style="color: #008080;">mysql</span>/data/martin.err      |
    | log_output                             | <span style="color: #008080;">FILE</span>                                  |
    | log_queries_not_using_indexes          | OFF                                   |
    | log_slave_updates                      | OFF                                   |
    | log_slow_admin_statements              | OFF                                   |
    | log_slow_slave_statements              | OFF                                   |
    | log_throttle_queries_not_using_indexes | 0                                     |
    | log_warnings                           | 1                                     |
    +----------------------------------------+---------------------------------------+<span style="color: #000000;">

三、常用binlog日志操作命令
    </span>1.<span style="color: #000000;">查看所有binlog日志列表
      </span><span style="color: #008080;">mysql</span>&gt;<span style="color: #000000;"> show master logs;

    </span>2.<span style="color: #000000;">查看master状态，即最后(最新)一个binlog日志的编号名称，及其最后一个操作事件pos结束点(Position)值
      </span><span style="color: #008080;">mysql</span>&gt;<span style="color: #000000;"> show master status;

    </span>3.<span style="color: #000000;">刷新log日志，自此刻开始产生一个新编号的binlog日志文件
      </span><span style="color: #008080;">mysql</span>&gt; <span style="color: #008080;">flush</span><span style="color: #000000;"> logs;
      注：每当mysqld服务重启时，会自动执行此命令，刷新binlog日志；在mysqldump备份数据时加 </span>-<span style="color: #000000;">F 选项也会刷新binlog日志；

    </span>4.<span style="color: #000000;">重置(清空)所有binlog日志
      </span><span style="color: #008080;">mysql</span>&gt; <span style="color: #008080;">reset</span><span style="color: #000000;"> master;


四、查看某个binlog日志内容，常用有两种方式：

    </span>1.<span style="color: #000000;">使用mysqlbinlog自带查看命令法：
      注</span>:<span style="color: #000000;"> binlog是二进制文件，普通文件查看器cat more vi等都无法打开，必须使用自带的 mysqlbinlog 命令查看
          binlog日志与数据库文件在同目录中(我的环境配置安装是选择在</span>/usr/local/<span style="color: #008080;">mysql</span>/<span style="color: #000000;">data中)
      在MySQL5</span>.5以下版本使用mysqlbinlog命令时如果报错，就加上 &ldquo;--no-<span style="color: #000000;">defaults&rdquo;选项
    
      </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqlbinlog /usr/local/mysql/data/mysql-bin.000013</span>
<span style="color: #000000;">        下面截取一个片段分析：

         </span>...............................................................................
         <span style="color: #008000;">#</span><span style="color: #008000;"> at 552</span>
         <span style="color: #008000;">#</span><span style="color: #008000;">131128 17:50:46 server id 1  end_log_pos 665   Query   thread_id=11    exec_time=0     error_code=0 ----&gt;执行时间:17:50:46；pos点:665</span>
         SET TIMESTAMP=1385632246<span style="color: #008000;">/*</span><span style="color: #008000;">!</span><span style="color: #008000;">*/</span><span style="color: #000000;">;
         update zyyshop</span>.stu set name='李四' where id=4              ----&gt;<span style="color: #000000;">执行的SQL
         </span><span style="color: #008000;">/*</span><span style="color: #008000;">!</span><span style="color: #008000;">*/</span><span style="color: #000000;">;
         </span><span style="color: #008000;">#</span><span style="color: #008000;"> at 665</span>
         <span style="color: #008000;">#</span><span style="color: #008000;">131128 17:50:46 server id 1  end_log_pos 692   Xid = 1454 ----&gt;执行时间:17:50:46；pos点:692 </span>
         ...............................................................................<span style="color: #000000;">

         注</span>: server id 1<span style="color: #000000;">     数据库主机的服务号；
             end_log_pos </span>665<span style="color: #000000;"> pos点
             thread_id</span>=11<span style="color: #000000;">    线程号


    </span>2.<span style="color: #000000;">上面这种办法读取出binlog日志的全文内容较多，不容易分辨查看pos点信息，这里介绍一种更为方便的查询命令：

      </span><span style="color: #008080;">mysql</span>&gt; show binlog events [IN 'log_name'] [FROM <span style="color: #008080;">pos</span>] [LIMIT [offset,<span style="color: #000000;">] row_count];

             选项解析：
               IN </span>'log_name'<span style="color: #000000;">   指定要查询的binlog文件名(不指定就是第一个binlog文件)
               FROM </span><span style="color: #008080;">pos</span><span style="color: #000000;">        指定从哪个pos起始点开始查起(不指定就是从整个文件首个pos点开始算)
               LIMIT [offset</span>,<span style="color: #000000;">] 偏移量(不指定就是0)
               row_count       查询总条数(不指定就是所有行)

             截取部分查询结果：
             </span>*************************** 20. row ***************************<span style="color: #000000;">
                Log_name</span>: <span style="color: #008080;">mysql</span>-bin.000021  ----------------------------------------------&gt;<span style="color: #000000;"> 查询的binlog日志文件名
                     </span><span style="color: #008080;">Pos</span>: 11197 ----------------------------------------------------------&gt; pos起始点:<span style="color: #000000;">
              Event_type</span>: Query ----------------------------------------------------------&gt;<span style="color: #000000;"> 事件类型：Query
               Server_id</span>: 1 --------------------------------------------------------------&gt;<span style="color: #000000;"> 标识是由哪台服务器执行的
             End_log_pos</span>: 11308 ----------------------------------------------------------&gt; pos结束点:11308<span style="color: #000000;">(即：下行的pos起始点)
                    Info</span>: <span style="color: #0000ff;">use</span> `zyyshop`; INSERT INTO `team2` VALUES (0,345,'asdf8er5') ---&gt;<span style="color: #000000;"> 执行的sql语句
             </span>*************************** 21. row ***************************<span style="color: #000000;">
                Log_name</span>: <span style="color: #008080;">mysql</span>-bin.000021
                     <span style="color: #008080;">Pos</span>: 11308 ----------------------------------------------------------&gt; pos起始点:11308<span style="color: #000000;">(即：上行的pos结束点)
              Event_type</span>:<span style="color: #000000;"> Query
               Server_id</span>: 1<span style="color: #000000;">
             End_log_pos</span>: 11417<span style="color: #000000;">
                    Info</span>: <span style="color: #0000ff;">use</span> `zyyshop`; <span style="color: #008000;">/*</span><span style="color: #008000;">!40000 ALTER TABLE `team2` ENABLE KEYS </span><span style="color: #008000;">*/</span>
             *************************** 22. row ***************************<span style="color: #000000;">
                Log_name</span>: <span style="color: #008080;">mysql</span>-bin.000021
                     <span style="color: #008080;">Pos</span>: 11417<span style="color: #000000;">
              Event_type</span>:<span style="color: #000000;"> Query
               Server_id</span>: 1<span style="color: #000000;">
             End_log_pos</span>: 11510<span style="color: #000000;">
                    Info</span>: <span style="color: #0000ff;">use</span> `zyyshop`; DROP TABLE <span style="color: #0000ff;">IF</span><span style="color: #000000;"> EXISTS `type`

      这条语句可以将指定的binlog日志文件，分成有效事件行的方式返回，并可使用limit指定pos点的起始偏移，查询条数；
      
      A</span>.<span style="color: #000000;">查询第一个(最早)的binlog日志：
        </span><span style="color: #008080;">mysql</span>&gt;<span style="color: #000000;"> show binlog events\G; 
    
      B</span>.指定查询 <span style="color: #008080;">mysql</span>-bin.000021<span style="color: #000000;"> 这个文件：
        </span><span style="color: #008080;">mysql</span>&gt; show binlog events in 'mysql-bin.000021'<span style="color: #000000;">\G;

      C</span>.指定查询 <span style="color: #008080;">mysql</span>-bin.000021 这个文件，从pos点:<span style="color: #000000;">8224开始查起：
        </span><span style="color: #008080;">mysql</span>&gt; show binlog events in 'mysql-bin.000021' from 8224<span style="color: #000000;">\G;

      D</span>.指定查询 <span style="color: #008080;">mysql</span>-bin.000021 这个文件，从pos点:<span style="color: #000000;">8224开始查起，查询10条
        </span><span style="color: #008080;">mysql</span>&gt; show binlog events in 'mysql-bin.000021' from 8224 limit 10<span style="color: #000000;">\G;

      E</span>.指定查询 <span style="color: #008080;">mysql</span>-bin.000021 这个文件，从pos点:<span style="color: #000000;">8224开始查起，偏移2行，查询10条
        </span><span style="color: #008080;">mysql</span>&gt; show binlog events in 'mysql-bin.000021' from 8224 limit 2,10<span style="color: #000000;">\G;


五、恢复binlog日志实验(zyyshop是数据库)
    </span>1.假设现在是凌晨4:00<span style="color: #000000;">，我的计划任务开始执行一次完整的数据库备份：

      将zyyshop数据库备份到 </span>/root/BAK.zyyshop.<span style="color: #000000;">sql 文件中：
      </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqldump -uroot -p123456 -lF --log-error=/root/myDump.err -B zyyshop &gt; /root/BAK.zyyshop.sql</span>
        ......<span style="color: #000000;">

        大约过了若干分钟，备份完成了，我不用担心数据丢失了，因为我有备份了，嘎嘎</span>~~~<span style="color: #000000;">

      由于我使用了</span>-<span style="color: #000000;">F选项，当备份工作刚开始时系统会刷新log日志，产生新的binlog日志来记录备份之后的数据库&ldquo;增删改&rdquo;操作，查看一下：
      </span><span style="color: #008080;">mysql</span>&gt;<span style="color: #000000;"> show master status;
      </span>+------------------+----------+--------------+------------------+
      | <span style="color: #008080;">File</span>             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
      +------------------+----------+--------------+------------------+
      | <span style="color: #008080;">mysql</span>-bin.000023 |      120 |              |                  |
      +------------------+----------+--------------+------------------+<span style="color: #000000;">
      也就是说， </span><span style="color: #008080;">mysql</span>-bin.000023 是用来记录4:<span style="color: #000000;">00之后对数据库的所有&ldquo;增删改&rdquo;操作。


    </span>2.早9:00上班了，业务的需求会对数据库进行各种&ldquo;增删改&rdquo;操作~~~~~~~<span style="color: #000000;">
      @ 比如：创建一个学生表并插入、修改了数据等等：
        CREATE TABLE </span><span style="color: #0000ff;">IF</span><span style="color: #000000;"> NOT EXISTS `tt` (
          `id` int(</span>10) unsigned NOT <span style="color: #0000ff;">NULL</span> AUTO_INCREMENT,<span style="color: #000000;">
          `name` varchar(</span>16) NOT <span style="color: #0000ff;">NULL</span>,<span style="color: #000000;">
          `sex` enum(</span>'m','w') NOT <span style="color: #0000ff;">NULL</span> <span style="color: #0000ff;">DEFAULT</span> 'm',<span style="color: #000000;">
          `age` tinyint(</span>3) unsigned NOT <span style="color: #0000ff;">NULL</span>,<span style="color: #000000;">
          `classid` char(</span>6) <span style="color: #0000ff;">DEFAULT</span> <span style="color: #0000ff;">NULL</span>,<span style="color: #000000;">
          PRIMARY </span><span style="color: #008080;">KEY</span><span style="color: #000000;"> (`id`)
         ) ENGINE</span>=InnoDB <span style="color: #0000ff;">DEFAULT</span> CHARSET=<span style="color: #000000;">utf8;


      导入实验数据
      </span><span style="color: #008080;">mysql</span>&gt; insert into zyyshop.tt(`name`,`sex`,`age`,`classid`) values('yiyi','w',20,'cls1'),('xiaoer','m',22,'cls3'),('zhangsan','w',21,'cls5'),('lisi','m',20,'cls4'),('wangwu','w',26,'cls6'<span style="color: #000000;">);


      查看数据
      </span><span style="color: #008080;">mysql</span>&gt; select * from zyyshop.<span style="color: #000000;">tt;
      </span>+----+----------+-----+-----+---------+
      | id | name     | sex | age | classid |
      +----+----------+-----+-----+---------+
      |  1 | yiyi     | w   |  20 | cls1    |
      |  2 | xiaoer   | m   |  22 | cls3    |
      |  3 | zhangsan | w   |  21 | cls5    |
      |  4 | lisi     | m   |  20 | cls4    |
      |  5 | wangwu   | w   |  26 | cls6    |
      +----+----------+-----+-----+---------+<span style="color: #000000;">


      中午时分又执行了修改数据操作
      </span><span style="color: #008080;">mysql</span>&gt; update zyyshop.tt set name='李四' where id=4<span style="color: #000000;">;
      </span><span style="color: #008080;">mysql</span>&gt; update zyyshop.tt set name='小二' where id=2<span style="color: #000000;">;

      修改后的结果：
      </span><span style="color: #008080;">mysql</span>&gt; select * from zyyshop.<span style="color: #000000;">tt;
      </span>+----+----------+-----+-----+---------+
      | id | name     | sex | age | classid |
      +----+----------+-----+-----+---------+
      |  1 | yiyi     | w   |  20 | cls1    |
      |  2 | 小二     | m   |  22 | cls3    |
      |  3 | zhangsan | w   |  21 | cls5    |
      |  4 | 李四     | m   |  20 | cls4    |
      |  5 | wangwu   | w   |  26 | cls6    |
      +----+----------+-----+-----+---------+<span style="color: #000000;">


      假设此时是下午18</span>:00<span style="color: #000000;">，莫名地执行了一条悲催的SQL语句，整个数据库都没了：
      </span><span style="color: #008080;">mysql</span>&gt;<span style="color: #000000;"> drop database zyyshop;


    </span>3.<span style="color: #000000;">此刻杯具了，别慌！先仔细查看最后一个binlog日志，并记录下关键的pos点，到底是哪个pos点的操作导致了数据库的破坏(通常在最后几步)；
    
      备份一下最后一个binlog日志文件：
      </span><span style="color: #008000;">#</span><span style="color: #008000;"> ll /usr/local/mysql/data | grep mysql-bin</span>
      <span style="color: #008000;">#</span><span style="color: #008000;"> cp -v /usr/local/mysql/data/mysql-bin.000023 /root/</span>
<span style="color: #000000;">
      此时执行一次刷新日志索引操作，重新开始新的binlog日志记录文件，理论说 </span><span style="color: #008080;">mysql</span>-bin.000023<span style="color: #000000;"> 这个文件不会再有后续写入了(便于我们分析原因及查找pos点)，以后所有数据库操作都会写入到下一个日志文件；
      </span><span style="color: #008080;">mysql</span>&gt; <span style="color: #008080;">flush</span><span style="color: #000000;"> logs;
      </span><span style="color: #008080;">mysql</span>&gt;<span style="color: #000000;"> show master status;
      

    </span>4.<span style="color: #000000;">读取binlog日志，分析问题
      方式一：使用mysqlbinlog读取binlog日志：
        </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqlbinlog  /usr/local/mysql/data/mysql-bin.000023</span>
<span style="color: #000000;">
      方式二：登录服务器，并查看(推荐)：
        </span><span style="color: #008080;">mysql</span>&gt; show binlog events in 'mysql-bin.000023'<span style="color: #000000;">;
        
        以下为末尾片段：
        </span>+------------------+------+------------+-----------+-------------+------------------------------------------------------------+
        | Log_name         | <span style="color: #008080;">Pos</span>  | Event_type | Server_id | End_log_pos | Info                                                       |
        +------------------+------+------------+-----------+-------------+------------------------------------------------------------+
        | <span style="color: #008080;">mysql</span>-bin.000023 |  922 | Xid        |         1 |         953 | COMMIT <span style="color: #008000;">/*</span><span style="color: #008000;"> xid=3820 </span><span style="color: #008000;">*/</span>                                      |
        | <span style="color: #008080;">mysql</span>-bin.000023 |  953 | Query      |         1 |        1038 | BEGIN                                                      |
        | <span style="color: #008080;">mysql</span>-bin.000023 | 1038 | Query      |         1 |        1164 | <span style="color: #0000ff;">use</span> `zyyshop`; update zyyshop.tt set name='李四' where id=4|
        | <span style="color: #008080;">mysql</span>-bin.000023 | 1164 | Xid        |         1 |        1195 | COMMIT <span style="color: #008000;">/*</span><span style="color: #008000;"> xid=3822 </span><span style="color: #008000;">*/</span>                                      |
        | <span style="color: #008080;">mysql</span>-bin.000023 | 1195 | Query      |         1 |        1280 | BEGIN                                                      |
        | <span style="color: #008080;">mysql</span>-bin.000023 | 1280 | Query      |         1 |        1406 | <span style="color: #0000ff;">use</span> `zyyshop`; update zyyshop.tt set name='小二' where id=2|
        | <span style="color: #008080;">mysql</span>-bin.000023 | 1406 | Xid        |         1 |        1437 | COMMIT <span style="color: #008000;">/*</span><span style="color: #008000;"> xid=3823 </span><span style="color: #008000;">*/</span>                                      |
        | <span style="color: #008080;">mysql</span>-bin.000023 | 1437 | Query      |         1 |        1538 | drop database zyyshop                                      |
        +------------------+------+------------+-----------+-------------+------------------------------------------------------------+<span style="color: #000000;">

        通过分析，造成数据库破坏的pos点区间是介于 </span>1437--1538<span style="color: #000000;"> 之间，只要恢复到1437前就可。


    </span>5.<span style="color: #000000;">现在把凌晨备份的数据恢复：
      
      </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysql -uroot -p123456 -v &lt; /root/BAK.zyyshop.sql;</span>
<span style="color: #000000;">
      注</span>: 至此截至当日凌晨(4:00<span style="color: #000000;">)前的备份数据都恢复了。
          但今天一整天(</span>4:00--18:00)的数据肿么办呢？就得从前文提到的 <span style="color: #008080;">mysql</span>-bin.000023 新日志做文章了......


    6.<span style="color: #000000;">从binlog日志恢复数据
      
      恢复语法格式：
      </span><span style="color: #008000;">#</span><span style="color: #008000;"> mysqlbinlog mysql-bin.0000xx | mysql -u用户名 -p密码 数据库名</span>
<span style="color: #000000;">
        常用选项：
          </span>--start-position=953<span style="color: #000000;">                   起始pos点
          </span>--stop-position=1437<span style="color: #000000;">                   结束pos点
          </span>--start-datetime="2013-11-29 13:18:54"<span style="color: #000000;"> 起始时间点
          </span>--stop-datetime="2013-11-29 13:21:53"<span style="color: #000000;">  结束时间点
          </span>--database=<span style="color: #000000;">zyyshop                     指定只恢复zyyshop数据库(一台主机上往往有多个数据库，只限本地log日志)
            
        不常用选项：    
          </span>-u --user=name              Connect to the remote server <span style="color: #0000ff;">as</span> username.<span style="color: #000000;">连接到远程主机的用户名
          </span>-p --password[=name]        Password to connect to remote server.<span style="color: #000000;">连接到远程主机的密码
          </span>-h --host=name              Get the binlog from server.<span style="color: #000000;">从远程主机上获取binlog日志
          </span>--read-from-remote-server   Read binary logs from a <span style="color: #008080;">MySQL</span> server.<span style="color: #000000;">从某个MySQL服务器上读取binlog日志

      小结：实际是将读出的binlog日志内容，通过管道符传递给mysql命令。这些命令、文件尽量写成绝对路径；

      A</span>.<span style="color: #000000;">完全恢复(本例不靠谱，因为最后那条 drop database zyyshop 也在日志里，必须想办法把这条破坏语句排除掉，做部分恢复)
        </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqlbinlog  /usr/local/mysql/data/mysql-bin.000021 | /usr/local/mysql/bin/mysql -uroot -p123456 -v zyyshop </span>
<span style="color: #000000;">
      B</span>.<span style="color: #000000;">指定pos结束点恢复(部分恢复)：
        @ </span>--stop-position=953<span style="color: #000000;"> pos结束点
        注：此pos结束点介于&ldquo;导入实验数据&rdquo;与更新&ldquo;name</span>='李四'&rdquo;之间，这样可以恢复到更改&ldquo;name='李四'<span style="color: #000000;">&rdquo;之前的&ldquo;导入测试数据&rdquo;
        </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqlbinlog --stop-position=953 --database=zyyshop /usr/local/mysql/data/mysql-bin.000023 | /usr/local/mysql/bin/mysql -uroot -p123456 -v zyyshop</span>
<span style="color: #000000;">      
        在另一终端登录查看结果(成功恢复了)：
        </span><span style="color: #008080;">mysql</span>&gt; select * from zyyshop.<span style="color: #000000;">tt;
        </span>+----+----------+-----+-----+---------+
        | id | name     | sex | age | classid |
        +----+----------+-----+-----+---------+
        |  1 | yiyi     | w   |  20 | cls1    |
        |  2 | xiaoer   | m   |  22 | cls3    |
        |  3 | zhangsan | w   |  21 | cls5    |
        |  4 | lisi     | m   |  20 | cls4    |
        |  5 | wangwu   | w   |  26 | cls6    |
        +----+----------+-----+-----+---------+<span style="color: #000000;">

      C</span>.<span style="color: #000000;">指定pso点区间恢复(部分恢复)：
        更新 name</span>='李四' 这条数据，日志区间是Pos[1038] --&gt; End_log_pos[1164]，按事务区间是：<span style="color: #008080;">Pos</span>[953] --&gt; End_log_pos[1195<span style="color: #000000;">]；

        更新 name</span>='小二' 这条数据，日志区间是Pos[1280] --&gt; End_log_pos[1406]，按事务区间是：<span style="color: #008080;">Pos</span>[1195] --&gt; End_log_pos[1437<span style="color: #000000;">]；

        c1</span>.单独恢复 name='李四'<span style="color: #000000;"> 这步操作，可这样：
           </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqlbinlog --start-position=1038 --stop-position=1164 --database=zyyshop  /usr/local/mysql/data/mysql-bin.000023 | /usr/local/mysql/bin/mysql -uroot -p123456 -v zyyshop</span>
<span style="color: #000000;">
           也可以按事务区间单独恢复，如下：
           </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqlbinlog --start-position=953 --stop-position=1195 --database=zyyshop  /usr/local/mysql/data/mysql-bin.000023 | /usr/local/mysql/bin/mysql -uroot -p123456 -v zyyshop</span>
<span style="color: #000000;">

        c2</span>.单独恢复 name='小二'<span style="color: #000000;"> 这步操作，可这样：
           </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqlbinlog --start-position=1280 --stop-position=1406 --database=zyyshop  /usr/local/mysql/data/mysql-bin.000023 | /usr/local/mysql/bin/mysql -uroot -p123456 -v zyyshop</span>
<span style="color: #000000;">    
           也可以按事务区间单独恢复，如下：
           </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqlbinlog --start-position=1195 --stop-position=1437 --database=zyyshop  /usr/local/mysql/data/mysql-bin.000023 | /usr/local/mysql/bin/mysql -uroot -p123456 -v zyyshop</span>
<span style="color: #000000;">

        c3</span>.将 name='李四'、name='小二'<span style="color: #000000;"> 多步操作一起恢复，需要按事务区间，可这样：
           </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqlbinlog --start-position=953 --stop-position=1437 --database=zyyshop  /usr/local/mysql/data/mysql-bin.000023 | /usr/local/mysql/bin/mysql -uroot -p123456 -v zyyshop</span>
<span style="color: #000000;">

      D</span>.<span style="color: #000000;">在另一终端登录查看目前结果(两名称也恢复了)：
        </span><span style="color: #008080;">mysql</span>&gt; select * from zyyshop.<span style="color: #000000;">tt;
        </span>+----+----------+-----+-----+---------+
        | id | name     | sex | age | classid |
        +----+----------+-----+-----+---------+
        |  1 | yiyi     | w   |  20 | cls1    |
        |  2 | 小二     | m   |  22 | cls3    |
        |  3 | zhangsan | w   |  21 | cls5    |
        |  4 | 李四     | m   |  20 | cls4    |
        |  5 | wangwu   | w   |  26 | cls6    |
        +----+----------+-----+-----+---------+<span style="color: #000000;">

      E</span>.<span style="color: #000000;">也可指定时间区间恢复(部分恢复)：除了用pos点的办法进行恢复，也可以通过指定时间区间进行恢复，按时间恢复需要用mysqlbinlog命令读取binlog日志内容，找时间节点。
        比如，我把刚恢复的tt表删除掉，再用时间区间点恢复
        </span><span style="color: #008080;">mysql</span>&gt;<span style="color: #000000;"> drop table tt;

        @ </span>--start-datetime="2013-11-29 13:18:54"<span style="color: #000000;">  起始时间点
        @ </span>--stop-datetime="2013-11-29 13:21:53"<span style="color: #000000;">   结束时间点

        </span><span style="color: #008000;">#</span><span style="color: #008000;"> /usr/local/mysql/bin/mysqlbinlog --start-datetime="2013-11-29 13:18:54" --stop-datetime="2013-11-29 13:21:53" --database=zyyshop /usr/local/mysql/data/mysql-bin.000021 | /usr/local/mysql/bin/mysql -uroot -p123456 -v zyyshop</span>
<span style="color: #000000;">
      总结：所谓恢复，就是让mysql将保存在binlog日志中指定段落区间的sql语句逐个重新执行一次而已。</span></pre>
</div>
<p>&nbsp;</p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		<p class="postfoot">
			posted on <span id="post-date">2013-12-02 17:22</span> <a href='http://www.cnblogs.com/martinzhang/'>马丁传奇</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://i.cnblogs.com/EditPosts.aspx?postid=3454358" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(3454358);return false;">收藏</a>
		</p>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=158181,cb_entryId=3454358,cb_blogApp=currentBlogApp,cb_blogUserGuid='588ce7ea-14f2-e211-8d02-90b11c0b17d6',cb_entryCreatedDate='2013/12/2 17:22:00';loadViewCount(cb_entryId);</script>
	
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = canShowAdsense(); 
    fixPostBodyFormat();
</script>
<script type='text/javascript'>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') +
              '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
  })();
</script>
<script type='text/javascript'>
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function() {
            googletag.defineSlot('/1090369/cnblogs_blogpost_C2', [468, 60], 'div-gpt-ad-1433581717989-0').addService(googletag.pubads());
            googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1433581717989-1').addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.pubads().collapseEmptyDivs();
            googletag.enableServices();
            });
        };
    } catch (e) { }
</script>
<div id="google_ad_c1" class="c_ad_block">
    <div id='div-gpt-ad-1433581717989-1' style='height:250px; width:300px;'>
    <script type='text/javascript'>
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1433581717989-1'); });
            } else {
                $('#div-gpt-ad-1433581717989-1').hide();
            }
    } catch (e) { }
    </script>
    </div>
</div>
<div id="under_post_news"></div>
<div id="google_ad_c2" class="c_ad_block">
<div id='div-gpt-ad-1433581717989-0' style='height:60px; width:468px;'>
<script type='text/javascript'>
try {
    if (enableGoogleAd) {
        googletag.cmd.push(function () { googletag.display('div-gpt-ad-1433581717989-0'); });
    } else {
        $('#div-gpt-ad-1433581717989-0').hide();
    }
} catch (e) { }
</script>
</div>
</div>
<div id="under_post_kb"></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
</script>
</div>

</div>

<p id="footer">
	Powered by: 
	<br />
	
	<a id="Footer1_Hyperlink3" NAME="Hyperlink1" href="http://www.cnblogs.com/" style="font-family:Verdana;font-size:12px;">博客园</a>
	<br />
	Copyright &copy; 马丁传奇
</p>
</body>
</html>
