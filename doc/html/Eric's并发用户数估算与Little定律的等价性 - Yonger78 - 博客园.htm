<!DOCTYPE html>
<html lang="zh-cn">
<head>
<meta charset="utf-8"/>
<title>Eric&#39;s并发用户数估算与Little定律的等价性 - Yonger78 - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=k2uL13BZlYpYjZ7FITMnMaB1mOfAPcMGfJChBRaBpP01"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/LessIsMoreRight/bundle-LessIsMoreRight.css?v=3AF0KmzslnZ2hxF5rXhd-V548H-oKMTlgXowS2z6oRs1"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/hundredsofyears/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/hundredsofyears/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/hundredsofyears/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'hundredsofyears', cb_enable_mathjax=false;</script>
<script src="/bundles/blog-common.js?v=nJDx8UubQZX9VogT9qEbaBjq1TmUREeH09Yin8VSvFo1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<div id="home">
<div id="header">
	<div id="blogTitle">
		
<!--done-->
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/hundredsofyears/">Performance engineering</a></div>
<div class="subtitle">Back-end performance and scalability</div>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li id="nav_sitehome"><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li id="nav_myhome"><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/hundredsofyears/">首页</a></li>
<li id="nav_q"><a class="menu" href="http://q.cnblogs.com/">博问</a></li>
<li id="nav_ing"><a class="menu" href="http://home.cnblogs.com/ing/">闪存</a></li>
<li id="nav_newpost"><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li id="nav_contact"><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/Yonger78">联系</a></li>
<li id="nav_rss"><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/hundredsofyears/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/hundredsofyears/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li id="nav_admin"><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>

		<div class="blogStats">
			
			
<!--done-->
随笔-3&nbsp;
文章-0&nbsp;
评论-1&nbsp;

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		

<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/hundredsofyears/p/3360305.html">Eric&#39;s并发用户数估算与Little定律的等价性</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">在国内性能测试的领域有一篇几乎被奉为大牛之作的经典文章，一个名叫</span><span lang="en-US">Eric Man Wong </span><span lang="zh-CN">于</span><span lang="en-US">2004</span><span lang="zh-CN">年发表了名为《Method for Estimating the Number of Concurrent Users》，里面介绍了一种对系统并发用户数估算的公式，并较为详细的阐述了过程以及证明方法。这个公式使用非常简单，很多性能测试工程师都在自己的项目中使用或者打算尝试使用，以至于在不分场合以及不具体分析系统用户行为的情况下使用。本文不打算深入探讨该公式的适用范围，我会在以后的文章中探讨这个问题。</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">我并不否定该公式在文章中作者指定条件下的正确性，它在一定程度上帮助我从另外一种思路考虑系统的性能模型，同时通过对性能工程的学习我发现该估算公式与</span><span lang="en-US">Little</span><span lang="zh-CN">定律尽然是等价的。</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><em><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">下面回顾下</span><span lang="en-US">Eric</span><span lang="zh-CN">是怎么得出这个公式的，根据原文的意思大概是这样</span><span lang="zh-CN">：</span></span></em></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">首先我们知道在系统中占用系统资源的都是在系统正在活动的用户，也就是所谓的并发用户，对于但是并不是出于系统中的用户比如刚登出或者还没来得及登入的用户是不会消耗系统资源的，所以当我们想测量系统的容量时，这部分用户不需要考虑，可以只考虑当前出于系统中的活跃用户。</span></p>
<p><span style="font-family: 宋体; font-size: 12px;"><span lang="zh-CN">然后文章引入了一个</span><span lang="en-US">login session</span><span lang="zh-CN">的概念，当然这个东西是一直有的，但本文需要用到所以特别指明是它是等同于用户登出系统时与登入系统时的这段时间差，也就是</span><span lang="en-US">session</span><span lang="zh-CN">的生存周期。</span></span></p>
<p><img src="http://images.cnitblog.com/blog/385452/201310/09225715-a2f7d8d3d46a4ee88593a686bb7216dc.png" alt="" /></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">文章中这个图很好的描述了系统在处理陆续到达用户时的系统某一时刻的状态，以及诠释通过计算并发用户数统计系统性能的概念或者思想。</span></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">&nbsp;</span></p>
<p><span style="font-family: 宋体; font-size: 12px;"><span lang="zh-CN">最终得出</span><span lang="en-US">C=nL/T.</span></span></p>
<p><span style="font-family: 宋体; font-size: 12px;">&nbsp;</span></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">证明过程以及后面的详述不表。</span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><em><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">接着再来看看什么是</span><span lang="en-US">Little</span><span lang="zh-CN">定律。</span></span></em></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">说实话这个定律应该是一个最基本的，也是在很多领域中已经广泛应用的定律，但是在国内性能测试领域出现的频率却不高。</span></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">&nbsp;</span></p>
<p><span style="font-family: 宋体; font-size: 12px;"><span lang="zh-CN">直接借用《</span><span lang="en-US">Programing Pearls </span><span lang="zh-CN">》的翻译：</span></span></p>
<p><span style="font-family: 宋体; font-size: 12px;">大多数的估算都遵循这样一个浅显的法则：总花费就等于每个部分的花费再乘以总的部分数。但某些时候我们还需要更深入地了解细节。俄亥俄州立大学的Bruce Weide就一条通用得出奇的规则写下如下文字。</span></p>
<p><span style="font-family: 宋体; font-size: 12px;">Denning和Buzen引入的"操作分析"（参见Computing Surveys 10第3期，1978年11月，第225~261页）比计算机系统队列网络模型更加通用。他们的展示相当精彩，不过由于文章主题的限制，他们并未深入揭示Little定律的通用性。他们的证明方法与队列和计算机系统都没有关系。想象一个任意的、有某些东西进入和离开的系统。Little定律可以表述为"系统中的东西的平均数目等于这些东西离开系统的平均速度乘以每个东西离开系统所花费的平均时间"。（若系统的总体出入流是平衡的，离开速率也就是进入速率。）</span></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">&nbsp;</span></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">&nbsp;</span></p>
<p><span style="font-family: 宋体; font-size: 12px;"><span lang="zh-CN">在建立性能模型时，一般是常使用如下公式表述</span><span lang="en-US">Little</span><span lang="zh-CN">定律：</span></span></p>
<p><span style="font-family: 宋体; font-size: 12px;">N=X*R</span></p>
<p><span style="font-family: 宋体; font-size: 12px;">&nbsp;</span></p>
<p><span style="font-family: 宋体; font-size: 12px;"><span lang="en-US">N </span><span lang="zh-CN">表示系统中同时活动的用户，包括正在处理中和队列中的</span></span></p>
<p><span style="font-family: 宋体; font-size: 12px;"><span lang="en-US">X</span><span lang="zh-CN">表示用户相继到达系统的速率，在平衡状态时即为系统吞吐量（到达</span><span lang="en-US">=</span><span lang="zh-CN">离开）</span></span></p>
<p><span style="font-family: 宋体; font-size: 12px;"><span lang="en-US">R</span><span lang="zh-CN">表示每个用户在系统中平均的驻留时间</span></span></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">&nbsp;</span></p>
<p><span style="font-family: 宋体; font-size: 12px;"><span lang="zh-CN">也就是说系统中平均同时被服务的用户数量等于用户到达系统的速度</span><span lang="en-US">*</span><span lang="zh-CN">每个用户在系统中待的时间</span></span></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">&nbsp;</span></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">这条定律非常实用也具有很广的适用性，举一个例子：</span></p>
<p><span style="font-family: 宋体; font-size: 12px;">比如说，你正在排队等待进入一个很受欢迎的夜总会，你可以通过估计人们进入的速率来知道自己还要等待多长时间。应用Little定律，你可以推理："这个地方差不多能容纳60人，平均在里面呆的时间是3个小时，所以我们以每小时20人的速度进入。而我们前面还有20个人，所以我们还要等上一个小时。</span></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">&nbsp;</span></p>
<p lang="zh-CN"><span style="font-family: 宋体; font-size: 12px;">上面的例子可以用公式进一步表述：</span></p>
<p><span style="font-family: 宋体; font-size: 12px;">R=3 hours</span></p>
<p><span style="font-family: 宋体; font-size: 12px;"><span lang="en-US">X=20 </span><span lang="zh-CN">人</span><span lang="en-US">/hour</span></span></p>
<p><span style="font-family: 宋体; font-size: 12px;">&nbsp;</span></p>
<p><span style="font-family: 宋体; font-size: 12px;"><span lang="en-US">So N=3 hours * 20 </span><span lang="zh-CN">人</span><span lang="en-US">/hour=60 </span><span lang="zh-CN">人，该夜总会能同时容纳</span><span lang="en-US">60</span><span lang="zh-CN">人</span></span><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p lang="zh-CN"><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">大家可以比较以上两种方法和定律，他们的表述是完全不同的，计算所需要的变量也不一样，但是经过下面的</span><span lang="en-US">case</span><span lang="zh-CN">后会有让你惊奇的发现。</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><strong><span style="font-family: 黑体; font-size: 14px;"><span lang="en-US">Case</span><span lang="zh-CN">：</span></span></strong></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">有一个论坛系统，每天的活跃用户有</span><span lang="en-US">500</span><span lang="zh-CN">，用户活跃时间主要集中在晚上</span><span lang="en-US">7</span><span lang="zh-CN">点到</span><span lang="en-US">12</span><span lang="zh-CN">点，平均每人登入登出一次，登陆时长为</span><span lang="en-US">30</span><span lang="zh-CN">分钟，请为该系统建立性能测试模型。</span></span></p>
<p lang="zh-CN"><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><em><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">使用</span><span lang="en-US">Eric</span><span lang="zh-CN">的估算公式解：</span></span></em></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">假设系统后端维护</span><span lang="en-US">session</span><span lang="zh-CN">，那么这个</span><span lang="en-US">session</span><span lang="zh-CN">的长度即为</span><span lang="en-US">30</span><span lang="zh-CN">分钟，</span><span lang="en-US">L=30minutes</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">用户活跃时长已经得知是从</span><span lang="en-US">7</span><span lang="zh-CN">点到</span><span lang="en-US">12</span><span lang="zh-CN">点共五个小时，</span><span lang="en-US">T=5 hours</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">那么并发用户数</span><span lang="en-US">C=n*L/T=500*30/(5*60)=50</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><em><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">同时我们也可以使用</span><span lang="en-US">Little</span><span lang="zh-CN">定律对系统并发用户数进行估算：</span></span></em></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="en-US">500</span><span lang="zh-CN">个用户需要在</span><span lang="en-US">7</span><span lang="zh-CN">点到</span><span lang="en-US">12</span><span lang="zh-CN">点这段时间陆续登入论坛可知，到达率</span><span lang="en-US">X=500/(5*60)= 5/3 </span><span lang="zh-CN">个用户</span><span lang="en-US">/</span><span lang="zh-CN">分钟</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">登陆时长</span><span lang="en-US">30</span><span lang="zh-CN">分钟为用户在系统中的驻留时间，</span><span lang="en-US">R=30</span><span lang="zh-CN">分钟</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">那么系统中同时被服务也就是并发数</span><span lang="en-US">N=X*R=5/3 *30=50</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p lang="zh-CN"><span style="font-family: 黑体; font-size: 14px;">看似两种全完不同的方法计算出来的结果完全一样，是巧合吗？或者一题多解？</span></p>
<p lang="zh-CN"><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">我们再来从另外的角度分解</span><span lang="en-US">Eric</span><span lang="zh-CN">的估算公式：</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="en-US">C=n*L/T </span><span lang="en-US">&nbsp;</span><span lang="zh-CN">可以表示为</span><span lang="en-US">&nbsp; </span><span lang="en-US">C=(n/T)*L </span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="en-US">n/T </span><span lang="zh-CN">是不是和我们刚才在上面</span><span lang="en-US">Little</span><span lang="zh-CN">中第一步一样，是计算到达率</span><span lang="en-US">X</span><span lang="zh-CN">的。</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">而</span><span lang="en-US">L</span><span lang="zh-CN">不就是</span><span lang="en-US">R</span><span lang="zh-CN">吗？都等同于</span><span lang="en-US">session</span><span lang="zh-CN">的长度。</span></span></p>
<p lang="zh-CN"><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">也就是说</span><span lang="en-US">C=(n/T)*T=X*R=N</span></span></p>
<p lang="zh-CN"><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="zh-CN">结论：由以上得知，</span><span lang="en-US">Eric's </span><span lang="zh-CN">估算公式跟</span><span lang="en-US">Little</span><span lang="zh-CN">定律是等价的</span><span lang="en-US">. </span><span lang="zh-CN">同时读者可以自己看看他们各自的证明过程</span><span lang="en-US">,</span><span lang="zh-CN">有一定的相似性。</span></span></p>
<p lang="zh-CN"><span style="font-family: 黑体; font-size: 14px;">我们也可以在能适用的范围内放心使用这两种估算方法，以节约资源和时间。</span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><span lang="en-US">Reference </span><span lang="zh-CN">：</span></span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><a href="http://www.ece.virginia.edu/mv/edu/715/lectures/littles-law/littles-law.pdf"><span lang="en-US">http://www.ece.virginia.edu/mv/edu/715/lectures/littles-law/littles-law.pdf</span></a></span></p>
<p><span style="font-family: 黑体; font-size: 14px;">&nbsp;</span></p>
<p><span style="font-family: 黑体; font-size: 14px;"><a href="http://emiraga.wikispaces.com/file/view/Littles.law.January.2009.pdf"><span lang="en-US">http://emiraga.wikispaces.com/file/view/Littles.law.January.2009.pdf</span></a></span></p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2013-10-09 23:04</span> <a href='http://www.cnblogs.com/hundredsofyears/'>Yonger78</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://i.cnblogs.com/EditPosts.aspx?postid=3360305" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(3360305);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=111524,cb_entryId=3360305,cb_blogApp=currentBlogApp,cb_blogUserGuid='fe5c49ee-ea6c-e111-aa3f-842b2b196315',cb_entryCreatedDate='2013/10/9 23:04:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
<a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
</script>
<div id="ad_under_post_holder">
<script type='text/javascript'>
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
</script>
<script type='text/javascript'>
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.defineSlot('/1090369/cnblogs_blogpost_C2', [468, 60], 'div-gpt-ad-1410860226396-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
</script>
<div id="google_ad_c1" class="c_ad_block">
    <div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'>
    <script type='text/javascript'>
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    </script>
    </div>
</div>
</div>
<div id="under_post_news"></div>
<div id="google_ad_c2" class="c_ad_block">
<div id='div-gpt-ad-1410860226396-0' style='width:468px; height:60px;'>
<script type='text/javascript'>
try {
    if (enableGoogleAd) {
        googletag.cmd.push(function () { googletag.display('div-gpt-ad-1410860226396-0'); });
    } else {
        $('#div-gpt-ad-1346480159711-0').hide();
    }
} catch (e) { }
</script>
</div>
</div>
<div id="under_post_kb"></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script></div>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2014 Yonger78
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
</body>
</html>
